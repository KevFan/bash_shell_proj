#!/bin/bash
#Kevin Fan (Date)
#Description: This script searches and removes all of a customer's information
# from the Address Book based on a particular customers name or alias

#Clear the terminal
clear

function readInput 
{
	#Ask user for search name
	printf "\nPlease enter name or alias of customer you wish to remove:  "

	#Reads in search name as parameter
	read input
	checkInput
}


#This function checks the search input to see if its valid.
#If not then the revelent message is displayed.
#If search input in valid, options are displayed to user.
#If no matches are found, relevant message is displayed
function checkInput
{
	if [ -z $input ]; then
		printf "\n\tNo entry detected. Please re-enter search term"
		readInput
	elif [[ $(grep -i $input CustomerDetails | wc -l) -ne 0 ]]; then
		printf "\n$(grep -i -c $input CustomerDetails) match(s) were found:\n"
		grep -i $input CustomerDetails 
		# awk '{ if ($2 == "$input" ) print $0 }' ../CustomerDetails 
		actionAfterSearch
	elif [[ $(grep -i $input CustomerDetails | wc -l) -eq 0 ]]; then
		printf "\nNo matches were found\n"
		actionAfterSearch
	fi
}

#This function removes the searched 
function removeInput
{
	#Inverted search - All but the searched item is moved to an temp file
	#Todo: Currently removes all customers if have same name with no validation
	#Need to print out how many is found and ask do user want to remove all or redo search and remove 
	grep -v $input CustomerDetails > /tmp/CustomerDetails

	#Temp file is moved back to the same directory replacing the old file
	mv /tmp/CustomerDetails CustomerDetails
	printf "\nCustomer Details successfully removed\n"
}

function actionAfterSearch
{
	validChoice=false;
	while [[ $validChoice = false ]]; do
		printf "\n\t1) Remove all matching entries found\n"
		printf "\n\t2) Perform another search\n"
		printf "\n\t=========================================\n"
		printf "\n\t0) Return to Main Menu\n"
		printf "\nEnter choice: "
		read choice
			if ! [[ $choice =~ ^-?[0-9]+$ ]]; then
				printf "\nInvalid (String) entry, only integers shown are allowed. Please re-renter option\n"
			elif [ $choice -le -1 ] || [ $choice -ge 3 ]; then
				printf "\nInvalid number entered\n"
			elif [[ $choice -eq 1 ]]; then
				removeInput
			elif [[ $choice -eq 2 ]]; then
				readInput
			else
				validChoice=valid
			fi
	done
}

readInput

# awk '{ if ($2 == "Kevin" ) print $0 }' ../CustomerDetails 
