#!/bin/bash
#Kevin Fan (26/24/17)
#Description: This script allows the user to search for an existing email 
# and enter a message subject and message text to send the email 

#clear the terminal
clear

# A function that serves as the first menu that the script calls
# This function gives options to the user to email all customers or to search and email
# a customer
function emailMenu 
{	
	validChoice=false
	while [[ $validChoice = false ]]; do
		printf "\n\t1) Email all customers"
		printf "\n\t2) Search and email one customer\n"
		printf "\n\t==================================\n"
		printf "\n\t0) Exit to main menu\n"
		printf "\nEnter a number: "

		read choice 
		clear
		case $choice in
			1) emailAddresses=$(awk -v search="$@" '$1 ~ search {print $1}' CustomerDetails )
			   validChoice=valid
			   email ;;
			2)	validChoice=valid
				readInput ;;
			0)	validChoice=valid ;;
			*)	printf "\nNot a valid option\n" ;;
		esac
	done
}

# This function reads in an input to search for from the user
function readInput 
{
	#Ask user for search name
	printf "\nPlease email of the customer you wish to search for:  "

	#Reads in search name as parameter
	read input
	lowerCaseInput=${input,,}
	checkInput
}

#Function that checks the search term input and displays relevant options
#If no input is detected, the readInput function is called again for user to re-enter
#If matches are found, the mathces are displayed, and the actionAfterSearch is called
#If no matches are found, the actionAfterSearch is called
function checkInput
{
	if [ -z $lowerCaseInput ]; then
		printf "\n\tNo entry detected. Please re-enter search term"
		readInput
	elif [[ $(awk -v search="$lowerCaseInput" '$1 ~ search' CustomerDetails | wc -l) -ne 0 ]]; then
		printf "\n$(awk -v search="$lowerCaseInput" '$1 ~ search' CustomerDetails | wc -l) matches were found:\n"
		emailAddresses=$(awk -v search="$lowerCaseInput" '$1 ~ search {print $1}' CustomerDetails )
		awk -v search="$lowerCaseInput" '$1 ~ search {print $1}' CustomerDetails 
		actionAfterSearch
	elif [[ $(awk -v search="$lowerCaseInput" '$1 ~ search {print $1}' CustomerDetails | wc -l) -eq 0 ]]; then
		printf "\nNo matches were found\n"
		actionAfterSearch
	fi
}

#Function that displays options for user after the first search
#Users can perform another search or return to main menu
#If an invalid option is entered, the script returns the the main menu
function actionAfterSearch
{
	validChoice=false;
	while [[ $validChoice = false ]]; do
		printf "\n\t1) Email to these address\n"
		printf "\n\t2) Perform another search\n"
		printf "\n\t============================\n"
		printf "\n\t0) Exit to main menu\n"
		printf "\nEnter choice: "
		read choice
		clear
			case $choice in
				1)	validChoice=valid
					email ;;
				2)	validChoice=valid
					readInput ;;
				0)	validChoice=valid ;;
				*)	printf "\nNot a valid option\n" ;;
			esac
	done
}

# Function that constructs the email
function email
{
	# While loop that continually loops until the message is non-blank
	while [[ -z $message ]]; do
		printf "\n\tEnter the email message:"
		read message
	done

	# While loop that continually loops until the emailSubject is non-blank
	while [[ -z $emailSubject ]]; do
		printf "\n\tEnter the email subject:"
		read emailSubject
	done

	# Until loop that continually loops until the option entered is Y or N
	until [[ ${option^^} = 'Y' || ${option^^} = 'N' ]]; do
		printf "\nSend email (Y/N):"
		read option
	done

	# If/Else statement that sends the email or discard the email depending on the user option
	if [[ ${option^^} = 'Y' ]]; then
		echo $message | mail -s $emailSubject $emailAddresses 
		printf "\nEmail sent"
	elif [[ ${option^^} = 'N' ]]; then
		printf "\nEmail discarded"
	fi
}

# Calls the emailMenu function that begins the loop
emailMenu

