#!/bin/bash
# Kevin Fan (26/24/17)
# Description: This script allows the user to search for an existing email 
# and enter a message subject and message text to send the email 

# clear the terminal
clear

# A function that serves as the first menu that the script calls. This function gives options to the user
# to email all customers or to search for a matching email
function emailMenu 
{	
	# Local variable to control while loop
	validChoice=false
	while [[ $validChoice = false ]]; do
		printf "\n\t1) Email all customers"
		printf "\n\t2) Search customer by email\n"
		printf "\n\t==================================\n"
		printf "\n\t0) Exit to main menu\n"
		printf "\nEnter a number: "
		read choice 
		clear
		# Case statement for relevant options
		case $choice in
			# When users enter 1, awk search the @ symabal from only the email field and to assign all emails to emailAddresses variable.
			# Set validChoice variable to valid to exit loop and call the email function
			1) emailAddresses=$(awk -v search="$@" '$1 ~ search {print $1}' CustomerDetails )
			   validChoice=valid
			   email ;;
			# When user enter 2, set validChoice variable to valid to exit loop and call the readInput function to allow user to enter details for search
			2)	validChoice=valid
				readInput ;;
			# When user enter 0, set validChoice variable to valid to exit loop and return to menu script
			0)	validChoice=valid ;;
			# All other cases, print out invalid option
			*)	printf "\nNot a valid option\n" ;;
		esac
	done
}

# This function reads in an input to search for from the user. Calls the checkInput function to validate input
function readInput 
{
	#Ask user for search name
	printf "\nPlease email of the customer you wish to search for:  "

	#Reads in search name as parameter
	read input

	# Converts the entered input from user to all lowercase to perform a case insensitive search 
	lowerCaseInput=${input,,}


	# Performs an awk search on the lowerCaseInput on the name and alias. Count the number of lines and assign to variable
	searchCount=$(awk -v search="$lowerCaseInput" '$1 ~ search' CustomerDetails | wc -l) 

	# Calls the check input function
	checkInput
}

# Function that checks the search term input and displays relevant options
function checkInput
{
	# If no input is detected, the readInput function is called again for user to re-enter
	if [ -z $lowerCaseInput ]; then
		printf "\n\tNo entry detected. Please re-enter search term"
		readInput
	# If matches are found, the number of matches and the matching emails are displayed. Matching emails from an awk search of the emails only are 
	# assigned to the emailAddresses variabl and the actionAfterSearch is called
	elif [[ $searchCount -ne 0 ]]; then
		printf "\n$searchCount matches were found:\n"
		emailAddresses=$(awk -v search="$lowerCaseInput" '$1 ~ search {print $1}' CustomerDetails )
		awk -v search="$lowerCaseInput" '$1 ~ search {print $1}' CustomerDetails 
		actionAfterSearch
	# If no matches are found, display message and the actionAfterSearch is called
	elif [[ $searchCount -eq 0 ]]; then
		printf "\nNo matches were found\n"
		actionAfterSearch
	fi
}

# Function that displays options for user after the first search
# Users can perform another search or return to main menu
# If an invalid option is entered, the script returns the the main menu
function actionAfterSearch
{
	# Local variable to control while loop
	validChoice=false;
	while [[ $validChoice = false ]]; do
		printf "\n\t1) Email to these address\n"
		printf "\n\t2) Perform another search\n"
		printf "\n\t============================\n"
		printf "\n\t0) Exit to main menu\n"
		printf "\nEnter choice: "
		read choice
		clear
			case $choice in
				# When user enter 1, set validChoice variable to valid to exit loop and call the email function to construct email
				1)	validChoice=valid
					email ;;
				# When user enter 2, set validChoice variable to valid to exit loop and call the readInput function to allow user to enter details for search
				2)	validChoice=valid
					readInput ;;
				# When user enter 0, set validChoice variable to valid to exit loop and return to menu script
				0)	validChoice=valid ;;
				# All other cases, print out invalid option
				*)	printf "\nNot a valid option\n" ;;
			esac
	done
}

# Function that constructs the email
function email
{
	# While loop that continually loops until the message is non-blank
	while [[ -z $message ]]; do
		printf "\n\tEnter the email message: "
		read message
	done

	# While loop that continually loops until the emailSubject is non-blank
	while [[ -z $emailSubject ]]; do
		printf "\n\tEnter the email subject: "
		read emailSubject
	done

	# Until loop that continually loops until the option entered is Y or N
	until [[ ${option^^} = 'Y' || ${option^^} = 'N' ]]; do
		printf "\nSend email (Y/N): "
		read option
	done

	# If/Else statement that sends the email or discard the email depending on the user option
	if [[ ${option^^} = 'Y' ]]; then
		echo $message | mail -s $emailSubject $emailAddresses 
		printf "\nEmail sent"
	elif [[ ${option^^} = 'N' ]]; then
		printf "\nEmail discarded"
	fi
}

# Calls the emailMenu function that begins the loop
emailMenu